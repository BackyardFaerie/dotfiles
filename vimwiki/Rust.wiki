# Functions
1: Declare functions as below; <code>fn functionName(parameter1: dataType1, parameter2: dataType2) -> returnValue: dataType {}</code>
^Declaring data types is optional but perhaps useful to be absolutely clear in the learning process. For <code>dataType1</code> and <code>dataType2</code> they tend to become arguments/values with the same stated/implied data type of the named parameters, such as if they are sent to the function from another one.^
^The return value is essentially the outcome of the function's processing and can be sent, for instance, to other functions as below where <code>multiply_nums</code> has <code>x</code> and <code>y</code> as parameters, does things to them and returns the variable <code>result</code> of i32 type, <code>divide_nums</code> takes the <code>result</code> i32, does things to it and returns <code>finalNum</code> which is then taken by the <code>println!</code> macro.^
^The <code>result</code> return value does not need to be mutable because it goes out of scope and will only be required by <code>divide_nums</code>. If the return value was required elsewhere there could only be immutable references to it assuming it was even in scope. I think being passed into <code>divide_nums</code> implicitly makes <code>result</code> mutable therefore nothing can else reference or access it as it is being mutated/modified by <code>divide_nums</code>.^
<code>fn multiply_nums(x: i32, y: i32) -> result: i32 {
...
}

fn divide_nums(result: i32) -> finalNum: i32 {
...
}
println!("{}",finalNum);
</code>
2: Functions implicitly deallocate memory at the end of their scope by running a <code>.drop()</code>
<code>fn name() -> i32 {
...
} .drop()</code> <---implied, not explicitly included by programmer

3: Send values to other functions in the format <code>otherFunctionName(sentData)</code> as below;
<code>fn first_function(var1: i32) -> i32 {
let s = String::from("hello");
second_function(s);
}

fn second_function(s: &String) -> usize {
let bytes = s.as_bytes();
println!("{:?}", bytes);
}
</code>
4: Methods are shorthand for functions being applied to the value before the <code>.</code>, such as <code>var.do_things()</code> where <code>do_things</code> is a user defined function elsewhere in the code/file.
^Another example would be <code>.copy()</code> which is referring to a function made by the Rust devs and put into the standard library.^

5: Multiple vars can be sent to a function simultaneously as below ^(this is a tuple)^
<code>let (var1, var2) = function(signature values);
let (string, file) = parse(&str);</code>

6: Functions can return multiple values, grouped together as below (this is a tuple)
<code>fn parse(args: &[String]) -> (&str, &str) {
}</code>

# Variables and Constants
1: Variables defined via
	<code>let x = value;</code>

2: All vars are immutable by default, explicit <code>mut</code> is required to make them mutable
	<code>let mut x = value;</code>

3: You can **ONLY** assign values to mutable variables of the correct type e.g chars/strings cannot be assigned to integers
	Illegal
	<code>let mut x = 5;
	let x = 'd';</code>

4: Contrary to above, immutable vars when redeclared create a new var (even in same scope) and can even be of a different data type, note as above that this is **NOT** applicable to mutable vars
	Legal			Illegal
	<code>let x = 5;	let mut x = 5;
	...			...
	let x = string;		let x = string;</code>
Mutable vars can change **VALUE** within a scope but *NOT DATA TYPE*
In the above example, if x was redeclared as an integer it could also call the previous value of x which was 5 and be let x = x + 12 and that doesn't give a compiler error. This is not shadowing because the two vars (confusingly both called x)
are within the same scope, it _would_ be shadowing if they were in _different_ scopes. I think mutable vars are unable to be redeclared, since their value can change over time but they remain the same var in runtime where immutable vars are
able to be redeclared since their values don't change over time so another var can be stored in runtime despite both being x to the user which would lead to this behaviour. This is different to constants because they can never change their
value or data type in the entire program
^I finally know why thanks to^ [[https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html#stack-only-data-copy|this page]]^, certain data types like ints are stored on the STACK not the HEAP because their size is known at compile time and therefore^
^there is an implicit <code>.copy()</code> going on so the values of x remains valid because they are NOT THE SAME VALUE IN MEMORY!!!^
^As an additional complexity, immutable ints are stored on the stack but mutable vars (including ints) are stored on the heap since they can be reallocated and therefore their size cannot be known at compile time meaning they cannot be on the stack^

5: Variables are implicitly assigned a data type if no explicit type is given
	<code>Implicit	Explicit
	let x = 6;	let x:u8 = 6;
</code>
6: Variables can be embedded into strings with <code>("{}", x)</code> as below
	<code>println!("Some words {}, x);</code> or <code>println!("x is equal to {x}");</code>
I think the println macro is a function here judging by the () meaning maybe the {} is a scope or maybe it is to give the compiler a place to assign the var like an array or something but I'm not sure

7: Redeclaring a var of the same name within the same scope is allowed, it creates another var of the same name with a different value **ONLY** if neither is mut (What? This is confusing and something to look into further, I think they take up different locations in memory)
	Legal
<code>	let x = 5;
	...
	let x = 12;
</code>
8: Constants defined as below. Unlike vars, consts can **NEVER** change data type or value 
<code>	const CONST_EXAMPLE: u32 = 18;</code>

9: [[https://en.wikipedia.org/wiki/Local_variable|Local variables]] must be known at compile time because they take up a set amount of memory

10: Variables being used by functions cannot be used/borrowed until they are explicitly returned, in the below example the divide_nums function cannot use x until the multiply_nums function has returned it
	<code>fn multiply_nums(int: i32) -> int32 {
	let x:i32 = 5;
	...
	}
	
	fn divide_nums(int: i32) -> i32 {
	...
	}
</code>^Borrowed references are READ ONLY meaning no operations other than reading can be performed on them^

11: Multiple vars can be sent to the same function simultaneously as below ^(this is a tuple)^
<code>let (search, file) = parse(&args);</code>

# Scope
1: Scope is generally anything contained within {}

2: Having a scope inside of another is allowed
<code>fn main() {
let x = value;
...
	{
	...
	}

}</code>

3: Redeclaring a var from another scope with a different value is shadowing

# Shadowing
1: Redeclaring a var from another scope with a different value is shadowing, this does not give a compiler error
<code>	fn main(){
	let x = 1;
		{</code> <---internal scope begin
		<code>let x = 3;</code> <---shadowing (note {} is internal scope but calling x from parent scope, x here calls from the parent scope and sets a value in this interior scope and therefore *IS* shadowing)
		<code>}</code> <---internal scope end
<code>	let x = 2;</code> <---**NOT** shadowing (this line is in the parent scope of main(){} as is x = 1, the scope is the same and therefore is *NOT* shadowing)
	<code>}
</code>
# Control Flow, If/Else/Else if Statements and Blocks
1: If statements can be stacked and nested within each other
    <code>if fizzish == "fizz" {return "foo";}
    if fizzish == "fuzz" {return "bar";}
    else {return "baz";}</code>
Note that switch or match statements are better suited to this purpose of comparing a few conditions

2: Else if statements require an if statement before them

3: Else statements require if statement(s) and/or optional else if before them

4: The return value of a conditional is placed within {}, <code>return</code> is not needed unless an early return is desired

5: Iterating over values in an array or vector can have the same operation applied to each element with <code>+=</code> or <code>*=</code> (possibly /= and -=?). In the example below <code>values</code> of the vector are doubled.
The <code>.iter_mut()</code> method is only there because the vector is mutable, I believe there is also a <code>.iter()</code> for immutable data e.g an array
	<code>for values in vector.iter_mut() {
	*values *= 2
	}</code>
	
# Arrays/Slices
1: Declare arrays as follows
	<code>let arrayName: [dataType; size] = [val1, val2, val3];</code>

2: Array sizes, traits and other [[https://en.wikipedia.org/wiki/Local_variable|local variables]] must be known at compile time since they can only take up a certain amount of memory and this must be known when compiling

3: Slices are very usually  [[https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html|borrowed references]] due to taking a known amount of memory since they are effectively just pointers
	<code>let sliceName: &[dataType] = &[assignedValue];</code>
^Remember that borrowed references are READ ONLY. They do not own the data and therefore cannot change it, unlike a mutable reference^

#  Tuples
1: [[https://doc.rust-lang.org/book/ch03-02-data-types.html#the-tuple-type|Tuples]] combine data types into one variable (like an array of various data types)

2: Declare tuples as follows
	<code>let tup: (dataType1, dataType2, dataType3) = (val1, val2, val3);</code> <---like variables, explicitly listing data types is optional. If data types are not explicitly given do not include <code>:</code>

3: Tuples **CANNOT** change size

4: Tuple indices can be referenced with {index}, naturally the tuple must be declared first
	Example
	<code>let value = {index};</code>
	
# Vectors
1: Declare vectors in one of the two following ways
	<code>let vectorName = vec![];</code> OR <code>Vec::new()</code> then fill with <code>.push()</code> method
^In the macro, the values in <code>[]</code> are the initial values of the vector, I think it is the same for <code>()</code> in <code>Vec::new</code>. Values can later be <code>.push()</code>ed to append them to the end^

2: [[https://doc.rust-lang.org/stable/book/ch08-01-vectors.html|Vectors]] store multiple values but **ALL MUST** be of the **SAME** data type unlike tuples

3: The values of a vector are stored together in memory (in the stack?)
	<code>data1, data2, VectorValue1, VectorValue2, VectorValue3, data3, data4...</code>

4: Strings are vectors internally, specifically of the UTF8 chars. This is opposed to &str which are references to a range of values (slice) within that vector

# References
1: When a value in memory is being referenced (e.g <code>&mut y below</code>), the current reference must dereference (with <code>*</code>) before another reference can point to the same value in memory.
^Especially for mutable references, a mutable reference means you can have NO other references (mutable or otherwise) to the same value in memory because a mutable reference takes ownership of the data and can change it which is unexpected behaviour for any immutable references to that memory value that might exist. Normal & references do not take ownership so there can be several since they are READ ONLY as mentioned before.^ [[https://medium.com/@verbruggenjesse/getting-started-with-rust-using-rustlings-part-5-move-semantics-43dff8766b16|Useful link about moving and borrowing]]
<code>let x = 5;
let y = &mut x;</code> <---declaring y as var which is a mutable reference to x
<code>y * 3 ...</code> <---doing things with y
<code>*y</code> <---**IMPORTANT PART** dereferencing y so that there are no mutable references to x
<code>let z = &mut x;</code> <---z becomes reference to x, this is only allowed because there can now be a mutable reference to that value in memory

2: The &str (string slice) data type is a reference to a range of values within a String (which internally is a vector of the chars contained within)

# References
1: When a value in memory is being referenced (e.g <code>&mut y below</code>), the current reference must dereference (with <code>*</code>) before another reference can point to the same value in memory.
^Especially for mutable references as only one mutable reference to a value in memory can be in effect/active at any given time^
<code>let x = 5;
let y = &mut x;</code> <---declaring y as var which is a mutable reference to x
<code>y * 3 ...</code> <---doing things with y
<code>*y</code> <---**IMPORTANT PART** dereferencing y so that there are no mutable references to x
<code>let z = &mut x;</code> <---z becomes reference to x, this is only allowed because there can now be a mutable reference to that value in memory

2: The &str (string slice) data type is a reference to a range of values within a String (which internally is a vector of the UTF8 chars contained within)
<code>String >> (in memory) Vec1[char1, char2, char3, char4, char5]</code>
<code>				&str >> [char3, char4, char5]</code> <---referencing only these chars (this slice) of the full vector
# Structs
1: Rust has classic (C like), tuple and unit structs

2: Declare classic struct exactly as below;
<code>struct Name {
varName1: dataType,
varName2: dataType,
varName3: dataType,
}</code>
^Classic structs can collate various data types together^

3: Classic structs are used via instances where each data type has a value assigned to it as below;
<code>let variablename = StructName {</code> <---Note this is not <code>struct Name</code> it is only the name of the struct since the struct keyword creates a struct
<code>varName1: value,
varName2: value,
varName3: value,
}</code>
^Field order is irrelevant (fields are the elements of the struct). Instances of a struct can be^ <code>mut</code>

4: To use only one field from a struct use dot notation as below;
<code>structName.fieldName = value;</code>
^Looks like method invocation minus (), is there a connection?^

5: To change fields in an instance, the entire instance must be <code>mut</code> since the values are declared in the instance not the struct itself
<code>let mut varName = structName { ... };</code>

6: If the data in two instances of the same struct are the same, one will become invalid since the data is moved from one to the other as with <code>=</code> assignments. If the values are different, both instances remain valid
^Need to check this again, how can data become invalid if it can copy from another struct with struct update syntax as shown below? Maybe the update syntax makes a copy rather than pointing to identical data? I remain confused on this point^
7: Tuple structs have no field names, only data types and are declared as below;
<code>struct structName(dataType1, dataType2, dataType3);</code>

8: Tuple struct fields are accessed via their index in <code>()</code>, as opposed to the <code>{}</code> of classic structs as below
<code>struct structName(u8, u8, u8);
let instanceName = structName(0, 255, 31);</code> <---the indices here correspond, where index 0 is assigned the value 0, index 1 is 255 and index 2 is 31

9: Each struct has its own type regardless of the data types contained within, practically this means that a function which takes one struct as a parameter cannot take another struct as an argument even if both structs have the same data types contained within
Legal							Illegal
<code>fn does_thing(fieldName3: String) -> String {}	fn does_other_thing(fieldName3: struct2) -> i32 {}</code>
^The format is fn functionName(parameter: argument). The argument is the concrete value of the parameter, like how a struct has a field (parameter) and a value (argument)^

10: Unit structs carry no data but do carry traits and are useful to apply desired traits to a var (I think, not on traits yet)
<code>struct unitStructName;</code> <---create unit struct
<code>let varName = unitStructName;</code> <---instance

11: Structs can copy data from others using <code>..firstStructName</code>. This applies the values from the named struct to the rest of the fields not explicitly defined in the second instance as below;
Creating struct
<code>struct firstStruct {
name: String,
age: u8,
email: String,
}</code>
First instance
<code>fn some_function() {
let firstInstance = firstStruct {
	name: aName,
	age: numYears,
	email: String::from("fakeemail@protonmail.com")
	};
}</code>
Second instance, copying age and email values from firstInstance, note no comma at end of line
<code>fn some_other_function() {
	let structUpdate = firstStruct; {
	name: String::from("differentName"),
	..firstInstance
	};
}</code>

12: Structs can be used in implement blocks and house functions as below
<code>struct Name {
}

impl Name {
fn function3(word: String, num: i32) -> (String, i32) {
	...
	}
}</code>
^Not sure why you would do this, need to read more on impl blocks^

13: Functions within implement blocks are invoked (such as in a different function) as below
<code>structName::functionName(arguments to function)</code>
^This looks like the <code>std::io</code> and <code>std::fs</code> syntax, are libraries impl blocks with various functions within that are associated with them? That's something to look into^

# Enums
1: Enums are a data type that enumerate possible values, an enum is used where the same data type needs to be grouped together (structs are more for varying data types grouped together). Enums search through mutually exclusive possibilities.
^Example: An enum would be used to determine if a char is a digit or not since the char either is or is not a digit. The char cannot be a digit and also not simultaneously. This is different from boolean values since they only return true/false but enums can return the actual value, in this case the char. Importantly, the iterates through the options and enumerates them, only returning the digits if that is the desired and implemented logic.^

2: Enums are created as below, where each line is a different mutually exclusive option (variant);
<code>enum enumName {
variant1,
variant2,
variant3,
}
</code>
3: Enums can be invoked in functions, methods and structs as shown [[https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html#enum-values|here]].
<code>let variable = enumName::variantName;
fn func_name(parameter: enumName)</code>

4: The function example above can be called, passing any possible enum variant to it as below;
<code>func_name(enumName::variantName);</code>

5: Enums can have data types associated with each variant as below;
    <code>enum enumName {
    variant1(dataType),
    variant2(dataType2),
    variant3{namedField1: dataType, namedField2: dataType2}
    }

enum enumName2 {
variant1(u8, u8, u8),
variant2(String),
variant3{x: u8, y: u8},
variant4(structDefinedElsewhere)
}
</code>
^Note the <code>{}</code> for the named fields, I believe that is creating an anonymous struct (struct without a name)^

# [[https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html|Error Handling]]
## This entire section needs to be reworked, I am still in the process of learning about error handling
1: The <code>panic!("Panic text");</code> macro is used for programmer/debugging messages
2: The syntax below handles errors for end users. Here <code>main</code> sends data to <code>otherFunction</code> which runs its logic and if the requirements for the <code>return Err</code> statement are true it returns an error value back to <code>main</code>. The error returns could be placed in <code>if {}</code> blocks so that if the conditions for an expected error are met, the user gets a message notifying them of such. ^Note the <code><ok return, error return</code> syntax ordering for the <code>Result</code> return value. In actual code, both of these would be data types/named variables like normal return values.^
<code>use std::process;

fn main() {
	let x = whateverXIsEqualTo.unwrap_or_else(|err| {println!("optional error message prefix {}", err);
		process::exit(1);
		});
...
}

fn otherFunction() -> Result<ok return, error return> {
...
return Err("error text");
Ok(return values)
}</code>
^Note that <code>std::process</code> is needed, the line in <code>main</code> prints the error message on the <code>else</code> part of the <code>.unwrap_or_else()</code> method, printing the inner value of <code>Err</code> in <code>()</code> and exits the program with exit code 1, a non-zero exit code which is sent to the OS and therefore read as an error. If there was no error the <code>unwrap</code> part of the method would run the inner value of <code>Ok</code> within <code>()</code>.^
